/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package hello

import hello.utils.JWT_HMAC_ALGORITHM
import hello.routes.userRouting
import hello.domain.UserDomain
import hello.persistence.postgres.DB_CONTEXT
import hello.persistence.postgres.UserPersistencePG
import io.ktor.application.*
import io.ktor.features.*
import io.ktor.response.*
import io.ktor.routing.*
import io.ktor.serialization.*
import io.ktor.server.engine.*
import io.ktor.server.netty.*
import io.ktor.auth.*
import io.ktor.auth.jwt.*
import com.auth0.jwt.JWT

fun createApp(userDomain: UserDomain) = fun Application.() {
    install(ContentNegotiation) {
        json()
    }

    install(Authentication) {
        jwt("auth-jwt") {
            realm = "Access to the \"hello-kotlin\" api"
            // https://ldapwiki.com/wiki/JSON%20Web%20Token%20Claims
            verifier(JWT
                .require(JWT_HMAC_ALGORITHM)
                .build())

            validate { credential ->
                if (credential.payload.getClaim("username").asString() != "") {
                    JWTPrincipal(credential.payload)
                } else {
                    null
                }
            }
        }
    }

    routing {
        get("/") {
            call.respondText("Hello friend!")
        }

        userRouting(userDomain)
    }
}

fun main() {
    val userDomain = UserDomain(UserPersistencePG(DB_CONTEXT))

    val server = embeddedServer(Netty,
        port = 8080,
        watchPaths = listOf("classes"),
        module = createApp(userDomain))
    DB_CONTEXT.connection.connect().get()

    try {
        server.start(wait = true)
    } finally {
        DB_CONTEXT.connection.disconnect().get()
    }
}